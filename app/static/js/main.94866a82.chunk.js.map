{"version":3,"sources":["Paint.js","modules/components/AppBar.js","modules/components/Toolbar.js","modules/views/AppAppBar.js","modules/views/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["Paint","ctx","document","getElementById","getContext","resize","canvas","width","window","innerWidth","height","innerHeight","addEventListener","e","buttons","beginPath","lineWidth","lineCap","strokeStyle","moveTo","pos","x","y","setPosition","lineTo","stroke","clientX","clientY","react_default","a","createElement","id","style","top","Component","withStyles","theme","root","color","palette","common","white","props","AppBar_default","Object","assign","elevation","position","defineProperty","breakpoints","up","Toolbar_default","title","fontSize","toolbar","justifyContent","left","flex","leftLinkActive","right","display","rightLink","marginLeft","spacing","unit","cursor","classes","components_AppBar","components_Toolbar","className","Link_default","variant","underline","Button_default","onClick","clear","placeholder","backgroundColor","primary","main","footer","bottom","light","predict","Algorithmia","require","getImage","toDataURL","App","state","data","refresh","answerReady","callBackendAPI","_callee","img","regenerator_default","wrap","_context","prev","next","sent","console","log","client","algo","pipe","then","response","get","stop","handleClose","_this","setState","clearRect","_this2","this","loading","res","catch","err","Dialog_default","open","onClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","autoFocus","views_AppAppBar","bind","src_Paint","LinearProgress_default","views_AppFooter","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94866a82.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Paint extends Component {\n\n    componentDidMount() {\n        // set canvas id to variable\n        let canvas= document.getElementById(\"draw\");\n        let ctx = canvas.getContext(\"2d\");\n\n        // get canvas 2D context and set it to the correct size\n        resize();\n\n        // resize canvas when window is resized\n        window.addEventListener(\"resize\", resize);\n        document.addEventListener(\"mousemove\", draw);\n        document.addEventListener(\"mousedown\", setPosition);\n        document.addEventListener(\"mouseenter\", setPosition);\n        function resize() {\n            ctx.canvas.width = window.innerWidth;\n            ctx.canvas.height = window.innerHeight-70;\n        }\n        // last known position\n        var pos = { x: 0, y: 0 };\n\n        // new position from mouse events\n        function setPosition(e) {\n            pos.x = e.clientX;\n            pos.y = e.clientY;\n        }\n        function draw(e) {\n            if (e.buttons !== 1) return; // if mouse is pressed.....\n\n            let color = '#111111';\n\n            ctx.beginPath(); // begin the drawing path\n\n            ctx.lineWidth = 10; // width of line\n            ctx.lineCap = \"round\"; // rounded end cap\n            ctx.strokeStyle = color; // hex color of line\n\n            ctx.moveTo(pos.x, pos.y); // from position\n            setPosition(e);\n            ctx.lineTo(pos.x, pos.y); // to position\n\n            ctx.stroke(); // draw it!\n        }\n    }\n\n    render() {\n        return (\n            <canvas id=\"draw\" style={{top: 70}}/>\n        );\n    }\n}\n\nexport default Paint;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiAppBar from '@material-ui/core/AppBar';\n\nconst styles = theme => ({\n    root: {\n        color: theme.palette.common.white,\n    },\n});\n\nfunction AppBar(props) {\n    return <MuiAppBar elevation={0} position=\"static\" {...props} />;\n}\n\nAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppBar);\n\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiToolbar from '@material-ui/core/Toolbar';\n\nexport const styles = theme => ({\n    root: {\n        height: 64,\n        [theme.breakpoints.up('sm')]: {\n            height: 70,\n        },\n    },\n});\n\nfunction Toolbar(props) {\n    return <MuiToolbar {...props} />;\n}\n\nexport default withStyles(styles)(Toolbar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport AppBar from '../components/AppBar';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer'\n    }\n});\n\nfunction AppAppBar(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <AppBar position=\"fixed\">\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Link\n                        variant=\"h6\"\n                        underline=\"none\"\n                        color=\"inherit\"\n                        className={classes.title}\n                    >\n                        {'Doodle Predictor'}\n                    </Link>\n                    <div className={classes.right}>\n                        <Button className={classes.rightLink} onClick={props.clear}>Clear Palette</Button>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer',\n        backgroundColor: theme.palette.primary.main\n    },\n    footer: {\n        bottom: 0,\n        backgroundColor: theme.palette.primary.light\n    }\n});\n\n\nfunction AppFooter(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <div position=\"fixed\" className={classes.footer}>\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Button className={classes.rightLink} onClick={props.predict}>Predict Class</Button>\n                    <div className={classes.right}/>\n                </Toolbar>\n            </div>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppFooter.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppFooter);","import React, { Component } from 'react';\nimport './App.css';\nimport Paint from './Paint';\nimport AppAppBar from './modules/views/AppAppBar';\nimport AppFooter from './modules/views/AppFooter';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n// import Algorithmia from './algorithmia-0.2.0';\n\nvar Algorithmia = require(\"algorithmia\");\n\n\n\nfunction getImage(canvas) {\n    return canvas.toDataURL();\n}\n\nclass App extends Component {\n    state = {\n        data: null,\n        refresh: false,\n        answerReady: false\n    };\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n        const script = document.createElement(\"script\");\n\n        // script.src = \"https://algorithmia.com/v1/clients/js/algorithmia-0.2.0.js\";\n        // script.type = \"text/javascript\";\n        // script.async = true;\n        //\n        // document.body.appendChild(script);\n        //\n        // this.callBackendAPI()\n        //     .then(res => this.setState({ data: res.express }))\n        //     .catch(err => console.log(err));\n    }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n        let canvas= document.getElementById(\"draw\");\n        let img = await getImage(canvas);\n        console.log(img);\n        var input = \"bzhvchxv\";\n        Algorithmia.client(\"simja/Qnx1XtrMU0lrb7WzQ+Zjd1\")\n            .algo(\"AkshayeAnithaPradeep/DoodleDetection/0.1.0\") // timeout is optional\n            .pipe(input)\n            .then(function(response) {\n                console.log(response.get());\n                return response;\n            });\n    };\n\n    clear() {\n        let canvas= document.getElementById(\"draw\");\n        let ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    handleClose = () => {\n        this.setState({ answerReady: false });\n    };\n\n    predict() {\n        this.setState({loading: true});\n        this.callBackendAPI()\n            .then(res => {\n                this.setState({ data: res, answerReady: true, loading: false })\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Dialog\n                    open={this.state.answerReady}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{\"Prediction\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            {this.state.data}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <AppAppBar clear={this.clear.bind(this)}/>\n                <Paint canvas={this.state.canvas} ctx={this.state.ctx}/>\n                {this.state.loading? <LinearProgress/>: ''}\n                <AppFooter predict={this.predict.bind(this)}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}